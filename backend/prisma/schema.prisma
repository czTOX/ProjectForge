// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id                String      @id @default(uuid())
  email             String      @unique
  hashedPassword    String
  firstName         String      @default("")
  lastName          String      @default("")
  profilePic        String      @default("")

  worksAt           WorksAt[]
  workHistory       TaskWork[]
  messages          Message[]
  assignedTo        Task[]
}

model WorksAt {
  id                String      @id @default(uuid())
  user              User        @relation(fields: [userId], references: [id])
  userId            String
  team              Team        @relation(fields: [teamId], references: [id])
  teamId            String
  role              String      @default("Member")
  permissionLevel   Int         @default(1)
}

model Team {
  id                String      @id @default(uuid())
  name              String
  inviteCode        String      @default(cuid())

  users             WorksAt[]
  projects          Project[]
}

model Project {
  id                String      @id @default(uuid())
  name              String
  description       String      @default("")
  deadline          DateTime?
  budget            Int?
  active            Boolean     @default(true)

  team              Team        @relation(fields: [teamId], references: [id])
  teamId            String
  tasks             Task[]
  messages          Message[]
  files             File[]
}

model Task {
  id                String      @id @default(uuid())
  name              String
  description       String      @default("")
  active            Boolean     @default(true)
  deadline          DateTime?
  createdAt         DateTime?   @default(now())
  updatedAt         DateTime?   @updatedAt

  project           Project     @relation(fields: [projectId], references: [id])
  projectId         String
  workHistory       TaskWork[]
  user              User?       @relation(fields: [userId], references: [id])
  userId            String?
}

model TaskWork {
  id                String      @id @default(uuid())
  createdAt         DateTime    @default(now())
  secondsSpent      Int

  user              User        @relation(fields: [userId], references: [id])
  userId            String
  task              Task        @relation(fields: [taskId], references: [id])
  taskId            String
}

model Message {
  id                String      @id @default(uuid())
  content           String
  createdAt         DateTime    @default(now())

  author            User        @relation(fields: [authorId], references: [id])
  authorId          String
  project           Project     @relation(fields: [projectId], references: [id])
  projectId         String
}

model File {
  id                String      @id @default(uuid())
  originalName      String
  fileName          String
  size              Int
  type              String
  uploadedAt        DateTime    @default(now())

  project           Project     @relation(fields: [projectId], references: [id])
  projectId         String
}
